# ✅ Финальный GitHub Actions Workflow — с фиксами PVC + стабильный Ingress без hostPort

name: Terraform E2E Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kind & Kubectl
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x kind && sudo mv kind /usr/local/bin/
          curl -Lo kubectl https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Create Kind Cluster
        run: kind create cluster --wait 90s

      - name: Wait for Cluster DNS (CoreDNS)
        run: kubectl rollout status deployment/coredns -n kube-system --timeout=120s

      - name: Prepare hostPath for PV
        run: |
          NODE=$(docker ps --filter name=control-plane --format '{{.Names}}')
          docker exec "$NODE" mkdir -p /tmp/demo-data
          docker exec "$NODE" chmod 777 /tmp/demo-data

      - name: Create demo-pv (manual StorageClass)
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: demo-pv
          spec:
            capacity:
              storage: 1Gi
            accessModes:
              - ReadWriteOnce
            volumeMode: Filesystem
            persistentVolumeReclaimPolicy: Retain
            storageClassName: manual
            hostPath:
              path: /tmp/demo-data
          EOF

      - name: Create demo-pvc (manual StorageClass)
        run: |
          kubectl create ns demo || true
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: demo-pvc
            namespace: demo
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
            volumeName: demo-pv
            storageClassName: manual
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        env:
          TF_VAR_demo_password: ${{ secrets.DEMO_PASSWORD }}
        run: terraform plan -lock=false

      - name: Terraform Apply (Test)
        env:
          TF_VAR_demo_password: ${{ secrets.DEMO_PASSWORD }}
        run: terraform apply -auto-approve

      - name: Wait for nginx-demo deployment
        run: |
          kubectl rollout status deployment/nginx-demo -n demo --timeout=180s

      - name: Wait for PVC
        run: |
          for i in {1..15}; do
            kubectl get pvc demo-pvc -n demo && break || sleep 5
          done

      - name: Check PVC is Bound
        run: |
          for i in {1..15}; do
            phase=$(kubectl get pvc demo-pvc -n demo -o jsonpath='{.status.phase}' 2>/dev/null || echo "")
            if [ "$phase" = "Bound" ]; then
              echo "✅ PVC is Bound"
              exit 0
            else
              echo "PVC status: $phase. Waiting..."
              sleep 5
            fi
          done
          echo "❌ PVC did not reach Bound state in time!"
          exit 1

      - name: Check Service
        run: kubectl get svc nginx-service -n demo

      - name: Port-Forward & cURL Test (NodePort)
        run: |
          kubectl port-forward svc/nginx-service 30080:80 -n demo &
          sleep 5
          curl -sf http://localhost:30080 | grep "K8s Demo via Terraform"

      - name: Install Ingress Controller (patched)
        run: |
          curl -sSL https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/kind/deploy.yaml \
            | sed '/hostPort:/d' \
            | kubectl apply -f -

      - name: Wait for Ingress Ready with Logs
        run: |
          kubectl get pods -n ingress-nginx -o wide
          kubectl describe pod -n ingress-nginx -l app.kubernetes.io/component=controller || true
          kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller || true
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=300s

      - name: Ingress Test
        run: |
          kubectl get ingress -n demo
          kubectl port-forward svc/ingress-nginx-controller 8081:80 -n ingress-nginx &
          sleep 10
          curl -sfH "Host: nginx-demo.local" http://localhost:8081/ | grep "K8s Demo via Terraform"

      - name: Check HPA
        run: |
          kubectl get hpa nginx-hpa -n demo || echo "HPA not found"

      - name: Terraform Destroy
        if: always()
        env:
          TF_VAR_demo_password: ${{ secrets.DEMO_PASSWORD }}
        run: |
          terraform init -backend=false
          terraform destroy -auto-approve

      - name: Delete Kind Cluster
        if: always()
        run: kind delete cluster
