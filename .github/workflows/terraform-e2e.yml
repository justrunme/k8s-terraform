name: Terraform E2E Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kind & Kubectl
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/
          curl -Lo kubectl https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create Kind Cluster
        run: kind create cluster --wait 60s

      - name: Wait for Cluster DNS (CoreDNS)
        run: |
          kubectl rollout status deployment/coredns -n kube-system --timeout=120s

      # --- Prepare hostPath for PV ---
      - name: Prepare hostPath for PV (Kind)
        run: |
          docker exec kind-control-plane mkdir -p /tmp/demo-data
          docker exec kind-control-plane chmod 777 /tmp/demo-data

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        env:
          TF_VAR_demo_password: ${{ secrets.DEMO_PASSWORD }}
        run: terraform plan -lock=false

      - name: Terraform Apply (Test)
        env:
          TF_VAR_demo_password: ${{ secrets.DEMO_PASSWORD }}
        run: terraform apply -auto-approve

      # ------------------- E2E/Smoke тесты -------------------

      - name: Wait for Demo Namespace
        run: |
          for i in {1..30}; do kubectl get ns demo && break || sleep 5; done

      - name: Wait for NGINX Pods
        run: |
          kubectl rollout status deployment/nginx-demo -n demo --timeout=180s

      - name: Wait for PVC to appear
        run: |
          for i in {1..15}; do
            kubectl get pvc demo-pvc -n demo && break || sleep 5
          done

      - name: PVC Bound Test
        run: |
          for i in {1..15}; do
            phase=$(kubectl get pvc demo-pvc -n demo -o jsonpath='{.status.phase}' 2>/dev/null || echo "")
            if [ "$phase" = "Bound" ]; then
              echo "PVC is Bound!"
              exit 0
            else
              echo "PVC status: $phase. Waiting..."
              sleep 5
            fi
          done
          echo "PVC did not reach Bound state in time!"
          exit 1

      - name: Check Service
        run: |
          kubectl get svc nginx-service -n demo

      - name: Port-Forward & cURL Test (NodePort)
        run: |
          kubectl port-forward svc/nginx-service 30080:80 -n demo &
          sleep 5
          curl -sf http://localhost:30080 | grep "K8s Demo via Terraform"

      # Ingress controller для Ingress тестов
      - name: Install Ingress Controller (ingress-nginx)
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/kind/deploy.yaml
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=180s

      - name: Wait for Ingress Ready
        run: |
          kubectl wait --namespace ingress-nginx \
            --for=condition=Ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=180s

      - name: Ingress Test (localhost)
        run: |
          kubectl get ingress -n demo
          kubectl port-forward svc/ingress-nginx-controller 8081:80 -n ingress-nginx &
          sleep 10
          curl -sfH "Host: nginx-demo.local" http://localhost:8081/ | grep "K8s Demo via Terraform"

      - name: Check HPA Status
        run: |
          kubectl get hpa nginx-hpa -n demo

      # ---------------------------------------------------------

      - name: Terraform Destroy
        if: always()
        env:
          TF_VAR_demo_password: ${{ secrets.DEMO_PASSWORD }}
        run: |
          terraform init -backend=false
          terraform destroy -auto-approve

      - name: Delete Kind Cluster
        if: always()
        run: kind delete cluster
